#include "textflag.h"

#define FPTOX1X2 \
	MOVQ a+0(FP), SI;\
	MOVQ b+24(FP), DI;\
	MOVOU (SI), X1;\
	MOVOU (DI), X2;\

#define RETX1X2 \
	MOVOU X1, (SI);\
	MOVOU X2, (DI);\
	RET;\

#define FPTOY1Y2 \
	MOVQ a+0(FP), SI;\
	MOVQ b+24(FP), DI;\
	MOVOU (SI), Y1;\
	MOVOU (DI), Y2;\

#define FPTOX1X2X3 \
	MOVQ a+0(FP), SI;\
	MOVQ b+24(FP), DI;\
	MOVOU (SI), X1;\
	MOVOU (DI), X2;\
	MOVQ c+48(FP), DI;\
	MOVOU (DI), X3;\

#define RETY1Y2 \
	MOVOU Y1, (SI);\
	MOVOU Y2, (DI);\
	RET;\



TEXT ·PABSBm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x1C;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	

TEXT ·PABSBm128int8(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x1C;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


TEXT ·PABSDm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x1E;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	

TEXT ·PABSDm128int32(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x1E;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


TEXT ·PABSWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x1D;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	

TEXT ·PABSWm128int16(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x1D;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


TEXT ·PHADDDm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	PHADDD X2, X1
	RETX1X2
	


TEXT ·PHADDSWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	PHADDSW X2, X1
	RETX1X2
	


TEXT ·PHADDWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	PHADDW X2, X1
	RETX1X2
	


TEXT ·PHSUBDm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	PHSUBD X2, X1
	RETX1X2
	


TEXT ·PHSUBSWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	PHSUBSW X2, X1
	RETX1X2
	


TEXT ·PHSUBWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	PHSUBW X2, X1
	RETX1X2
	


TEXT ·PMADDUBSWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x04;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


TEXT ·PMULHRSWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x0B;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


TEXT ·PSHUFBm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	PSHUFB X2, X1
	RETX1X2
	


TEXT ·PSIGNBm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x08;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


TEXT ·PSIGNDm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x0A;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


TEXT ·PSIGNWm128byte(SB),NOSPLIT,$0-48
	FPTOX1X2
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x09;  BYTE $0xca // $0xca = X2, X1
	RETX1X2
	


